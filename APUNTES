Objetivo: Escribir dos programas en C.
	·checker : recibe una cantidad de integers y lee instrucciones en la salida
		estándar. Una vez leído, checker ejecuta esas instrucciones y muestra
		OK si los integers están ordenados, o KO si no, ambos seguidos de '\n'.
		- checker recibe como argumento el stack formateado como una lista de
			integers, el primer argumento debe estar arriba del stack, si no se
			proporciona ningún argumento checker parará y no mostrará nada.
		- De producirse un error, deberá mostrarse Error, seguido de '\n' en la
			salida estándar, algún error podría ser por ejemplo: algunos
			argumentos no son integers, algunos elementos son mayores que un
			integer, hay duplicados, alguna instrucción no existe y/o está mal
			escrita.


	·push_swap : calcula y muestra en la salida estándar el programa más pequeño
		usando instrucciones escritas en el lenguaje Push_swap, que ordena los
		integers recibidos.
		- push_swap recibe como un argumento el stack formateado como una lista
			de integers, el primer argumento debe estar aarriba del stack.
		- El programa debe mostrar la secuencia de instrucciones más pequeña
			para ordenar el stack a, el número más pequeño debe estar arriba.
		- Las instrucciones deben estar seguidas de '\n' y nada más.
		- El objetivo es ordenar los stacks con el mínimo posible de operaciones
			se comparará el número de instrucciones con un máximo tolerable, si
			se muestra una lista de instrucciones demasiado larga, o no está
			correctamente ordenado, no se obtendrá ningún punto.
		- De producirse un error, deberá mostrarse Error, seguido de '\n' en la
			salida estándar, algún error podría ser por ejemplo: algunos
			argumentos no son integers,  algunos elementos son mayores que un
			integer, y/o hay duplicados.

	** EJEMPLO DE USO DURANTE EVALUACIÓN **

		$>ARG="4 67 3 87 23"; ./push_swap $ARG | wc -l
		6
		$>ARG="4 67 3 87 23"; ./push_swap $ARG | ./checker $ARG
		OK
		$>

Funciones permitidas:
	·write.
	·read.
	·malloc.
	·free.
	·exit.

Contamos con dos stacks: [A] & [B].
Operaciones disponibles:
	·sa : swap a - swap the first 2 elements at the top of stack a. Do nothing
		if there is only one or no elements).
	·sb : swap b - swap the first 2 elements at the top of stack b. Do nothing
		if there is only one or no elements).
	·ss : sa and sb at the same time.
	·pa : push a - take the first element at the top of b and put it at the top
		of a. Do nothing if b is empty.
	·pb : push b - take the first element at the top of a and put it at the top
		of b. Do nothing if a is empty.
	·ra : rotate a - shift up all elements of stack a by 1. The first element
		becomes the last one.
	·rb : rotate b - shift up all elements of stack b by 1. The first element
		becomes the last one.
	·rr : ra and rb at the same time.
	·rra : reverse rotate a - shift down all elements of stack a by 1. The last
		element becomes the first one.
	·rrb : reverse rotate b - shift down all elements of stack b by 1. The last
		element becomes the first one.
	·rrr : rra and rrb at the same time.

Bonus:
	·Debug option -v that can display the stack’s status after each operation
	·Colour option -c show in colours the last operation.
	·As long as the mandatory part is compatible, you can add the reading and
		writing part of instructions from a file.
